{"version":3,"sources":["axios.js","components/search-box/SearchBox.jsx","components/card/Card.jsx","components/card-list/CardList.jsx","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","SearchBox","state","searchString","this","props","placeholder","handleChange","className","type","onChange","React","Component","Card","monster","name","src","id","alt","CardList","monsters","map","key","App","searchField","filterMonsters","e","setState","target","value","filteredMonsters","filter","toLowerCase","includes","api","get","res","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WAMeA,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,yCCcIC,G,uNAbbC,MAAQ,CACNC,aAAc,I,wEAEP,IAAD,EAC8BC,KAAKC,MAAlCC,EADD,EACCA,YAAaC,EADd,EACcA,aACpB,OACE,yBAAKC,UAAU,cACb,2BAAOC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,S,GARzCI,IAAMC,YCUfC,G,MATF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACb,OACE,yBAAKN,UAAU,QACb,4BAAKM,EAAQC,MACb,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,iBAAqDC,IAAI,QCWxDC,G,MAbE,SAAAd,GAAU,IAClBe,EAAYf,EAAZe,SACP,OACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACXY,EAASC,KAAI,SAAAP,GAAO,OAAI,kBAAC,EAAD,CAAMA,QAASA,EAASQ,IAAKR,EAAQG,aCqB1DM,E,2MAzBbrB,MAAQ,CACNsB,YAAa,GACbJ,SAAU,I,EAEZK,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACH,YAAcE,EAAEE,OAAOC,S,wEAE/B,IAAD,EAC0BzB,KAAKF,MAA9BsB,EADD,EACCA,YACDM,EAFA,EACcV,SACcW,QAAO,SAAAjB,GAAO,OAAIA,EAAQC,KAAKiB,cAAcC,SAAST,EAAYQ,kBACpG,OACE,yBAAKxB,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWF,YAAY,oBAAoBC,aAAcH,KAAKqB,iBAC9D,kBAAC,EAAD,CAAUL,SAAUU,O,4KAKNI,EAAIC,IAAI,U,OAApBC,E,OACAhB,EAAWgB,EAAIC,KACrBjC,KAAKuB,SAAS,CAACP,a,2GAtBDT,IAAMC,WCKJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2bb0749b.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://jsonplaceholder.typicode.com'\r\n})\r\n\r\nexport default instance","import React from 'react'\r\nimport './SearchBox.scss'\r\n\r\nclass SearchBox extends React.Component {\r\n  state = {\r\n    searchString: ''\r\n  }\r\n  render(){\r\n    const {placeholder, handleChange} = this.props\r\n    return (\r\n      <div className=\"search-box\">\r\n        <input type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nimport './Card.scss'\r\n\r\nconst Card = ({monster}) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>{monster.name}</h3>\r\n      <img src={`https://robohash.org/${monster.id}?size=140x140`} alt=\"\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\nimport Card from '../card/Card'\r\n\r\nimport './CardList.scss'\r\n\r\nconst CardList = props => {\r\n  const {monsters} = props\r\n  return (\r\n    <div className=\"card-list\">\r\n      <div className=\"container\">\r\n        <div className=\"grid\">\r\n          { monsters.map(monster => <Card monster={monster} key={monster.id} />) }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList","import React from 'react'\nimport api from './axios'\nimport './App.scss'\n\nimport SearchBox from './components/search-box/SearchBox'\nimport CardList from './components/card-list/CardList'\n\nclass App extends React.Component {\n  state = {\n    searchField: '',\n    monsters: []\n  }\n  filterMonsters = (e) => {\n    this.setState({searchField:  e.target.value})\n  }\n  render(){\n    const {searchField, monsters} = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"app\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search Monsters..\" handleChange={this.filterMonsters}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n  async componentDidMount(){\n    const res = await api.get('/users')\n    const monsters = res.data\n    this.setState({monsters})\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}